### 인접 행렬로 구조화
V = int(input())
E = int(input())

# 1. 빈판 만들기
# 정점 개수 V개에 맞추어 V * V 크기의 0으로 가득찬 2차원 리스트를 만든다.
adj_matrix = [[0] * V for _ in range(V)]

# 2. 간선 정보 입력받기
# s, e로 입력받아 s에서 e로 이동할 수 있음을 나타낸다.
for _ in range(E):
    s, e = map(int, input().split())
    adj_matrix[s][e] = 1

print(adj_matrix)
# 입력
# 7
# 7
# 0 1
# 1 2
# 0 4
# 4 1
# 4 5
# 3 6
# 6 5

# 출력
# [[0, 1, 0, 0, 1, 0, 0], 
#  [0, 0, 1, 0, 0, 0, 0], 
#  [0, 0, 0, 0, 0, 0, 0], 
#  [0, 0, 0, 0, 0, 0, 1], 
#  [0, 1, 0, 0, 0, 1, 0], 
#  [0, 0, 0, 0, 0, 0, 0], 
#  [0, 0, 0, 0, 0, 1, 0]]


### 인접 리스트로 구조화
V = int(input())
E = int(input())

# 1. 빈판 만들기
# 정점 개수 V개에 맞추어 V개의 빈 리스트가 들어있는 2차원 리스트를 제작한다.
adj_lst = [[] for _ in range(V)]

# 2. 간선 정보 입력받기
# s, e로 입력받아 s에서 e로 이동할 수 있음을 나타낸다.
for _ in range(E):
    s, e = map(int, input().split())
    adj_lst[s].append(e)

print(adj_lst)


# 입력
# 7
# 7
# 0 1
# 1 2
# 0 4
# 4 1
# 4 5
# 3 6
# 6 5

# 출력
# [[1, 4], [2], [], [6], [1, 5], [], [5]]